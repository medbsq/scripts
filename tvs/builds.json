{"builds":[{"id":692731286,"repository_id":26688110,"commit_id":212162721,"number":"136","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.4","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.4","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.4","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-05-29T21:46:48Z","finished_at":"2020-05-29T22:22:29Z","duration":5763,"job_ids":[692731287,692731288,692731289,692731290,692731291,692731292,692731293,692731294]},{"id":692724070,"repository_id":26688110,"commit_id":212160213,"number":"135","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.4","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.4","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.4","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"failed","started_at":"2020-05-29T21:20:29Z","finished_at":"2020-05-29T21:52:02Z","duration":5718,"job_ids":[692724071,692724072,692724073,692724074,692724075,692724076,692724077,692724078]},{"id":691472422,"repository_id":26688110,"commit_id":211734853,"number":"134","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.4","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.4","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.4","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-05-26T20:36:08Z","finished_at":"2020-05-26T21:08:29Z","duration":5900,"job_ids":[691472423,691472424,691472425,691472426,691472427,691472428,691472429,691472430]},{"id":691453407,"repository_id":26688110,"commit_id":211728680,"number":"133","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.4","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.4","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.4","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-05-26T19:36:54Z","finished_at":"2020-05-26T20:08:32Z","duration":5778,"job_ids":[691453408,691453409,691453410,691453411,691453412,691453413,691453414,691453415]},{"id":691347170,"repository_id":26688110,"commit_id":211693361,"number":"132","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.4","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.4","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.4","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-05-26T14:50:28Z","finished_at":"2020-05-26T15:21:24Z","duration":5761,"job_ids":[691347171,691347172,691347173,691347174,691347175,691347176,691347177,691347178]},{"id":691293992,"repository_id":26688110,"commit_id":211675889,"number":"131","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.4","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.4","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.4","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-05-26T13:00:38Z","finished_at":"2020-05-26T13:34:08Z","duration":5858,"job_ids":[691293995,691293996,691293997,691293998,691293999,691294000,691294001,691294002]},{"id":682075415,"repository_id":26688110,"commit_id":208578256,"number":"130","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-05-01T19:03:55Z","finished_at":"2020-05-01T19:32:55Z","duration":5363,"job_ids":[682075416,682075417,682075418,682075419,682075420,682075421,682075422,682075424]},{"id":680591362,"repository_id":26688110,"commit_id":208073454,"number":"129","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-04-28T14:18:45Z","finished_at":"2020-04-28T14:49:03Z","duration":5400,"job_ids":[680591363,680591364,680591365,680591366,680591367,680591368,680591369,680591370]},{"id":680227423,"repository_id":26688110,"commit_id":207951915,"number":"128","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-27T18:08:39Z","finished_at":"2020-04-27T18:36:28Z","duration":5044,"job_ids":[680227424,680227425,680227426,680227427,680227428,680227429,680227430,680227431]},{"id":679178845,"repository_id":26688110,"commit_id":207607241,"number":"127","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-04-24T19:58:36Z","finished_at":"2020-04-24T20:30:27Z","duration":5299,"job_ids":[679178846,679178847,679178848,679178849,679178850,679178851,679178852,679178853]},{"id":679175600,"repository_id":26688110,"commit_id":207606205,"number":"126","event_type":"pull_request","pull_request":true,"pull_request_title":"Mdl 65306 resourceid","pull_request_number":1,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-04-24T19:31:55Z","finished_at":"2020-04-24T20:26:22Z","duration":5540,"job_ids":[679175601,679175602,679175603,679175604,679175605,679175606,679175607,679175608]},{"id":679175527,"repository_id":26688110,"commit_id":207606192,"number":"125","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-04-24T19:28:54Z","finished_at":"2020-04-24T19:58:19Z","duration":5361,"job_ids":[679175528,679175529,679175530,679175531,679175532,679175533,679175534,679175535]},{"id":679144112,"repository_id":26688110,"commit_id":207595964,"number":"124","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"group":"stable"},"state":"passed","started_at":"2020-04-24T17:54:37Z","finished_at":"2020-04-24T18:25:17Z","duration":5582,"job_ids":[679144113,679144114,679144115,679144116,679144117,679144118,679144119,679144120]},{"id":678560829,"repository_id":26688110,"commit_id":207402491,"number":"123","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-23T11:38:18Z","finished_at":"2020-04-23T12:05:24Z","duration":4945,"job_ids":[678560830,678560831,678560832,678560833,678560834,678560835,678560836,678560837]},{"id":677230074,"repository_id":26688110,"commit_id":206943942,"number":"122","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-20T14:22:30Z","finished_at":"2020-04-20T15:19:11Z","duration":5252,"job_ids":[677230075,677230076,677230077,677230078,677230079,677230080,677230081,677230082]},{"id":677229726,"repository_id":26688110,"commit_id":206943799,"number":"121","event_type":"pull_request","pull_request":true,"pull_request_title":"Mdl 65306 resourceid","pull_request_number":1,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"errored","started_at":"2020-04-20T13:06:18Z","finished_at":"2020-04-20T20:06:49Z","duration":50575,"job_ids":[677229727,677229728,677229729,677229730,677229731,677229732,677229733,677229734]},{"id":677229668,"repository_id":26688110,"commit_id":206943786,"number":"120","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"errored","started_at":"2020-04-20T13:03:17Z","finished_at":"2020-04-20T20:06:50Z","duration":29048,"job_ids":[677229669,677229670,677229671,677229672,677229673,677229674,677229675,677229676]},{"id":675503273,"repository_id":26688110,"commit_id":206378454,"number":"119","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"failed","started_at":"2020-04-15T22:03:57Z","finished_at":"2020-04-15T22:55:07Z","duration":5305,"job_ids":[675503274,675503275,675503276,675503277,675503278,675503279,675503280,675503281]},{"id":675503221,"repository_id":26688110,"commit_id":206378440,"number":"118","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-15T22:00:55Z","finished_at":"2020-04-15T22:30:16Z","duration":5289,"job_ids":[675503222,675503223,675503224,675503225,675503226,675503227,675503228,675503229]},{"id":675334558,"repository_id":26688110,"commit_id":206323529,"number":"117","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-15T14:35:05Z","finished_at":"2020-04-15T15:02:15Z","duration":5178,"job_ids":[675334559,675334560,675334561,675334562,675334563,675334564,675334565,675334566]},{"id":670754798,"repository_id":26688110,"commit_id":204807452,"number":"116","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-03T21:03:50Z","finished_at":"2020-04-03T21:43:48Z","duration":5124,"job_ids":[670754799,670754800,670754801,670754802,670754803,670754804,670754805,670754806]},{"id":670749981,"repository_id":26688110,"commit_id":204805908,"number":"115","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-03T20:49:16Z","finished_at":"2020-04-03T21:18:22Z","duration":5194,"job_ids":[670749982,670749983,670749984,670749985,670749986,670749987,670749988,670749989]},{"id":670701002,"repository_id":26688110,"commit_id":204789621,"number":"114","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-03T18:22:04Z","finished_at":"2020-04-03T18:52:15Z","duration":5255,"job_ids":[670701003,670701004,670701005,670701006,670701007,670701008,670701009,670701010]},{"id":670315321,"repository_id":26688110,"commit_id":204660781,"number":"113","event_type":"push","pull_request":false,"pull_request_title":null,"pull_request_number":null,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-02T21:53:16Z","finished_at":"2020-04-02T22:41:33Z","duration":5180,"job_ids":[670315322,670315324,670315325,670315327,670315328,670315329,670315330,670315331]},{"id":670315000,"repository_id":26688110,"commit_id":204660660,"number":"112","event_type":"pull_request","pull_request":true,"pull_request_title":"Mdl 65306 resourceid","pull_request_number":1,"config":{"language":"php","os":["linux"],"dist":"xenial","sudo":true,"notifications":{"email":[{"enabled":false}]},"services":["mysql"],"php":["7.3","7.2"],"addons":{"postgresql":"9.6"},"env":["jobs=[{:DB=\u003e\"none\", :TASK=\u003e\"CITEST\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"PHPUNIT\"}, {:DB=\u003e\"pgsql\", :TASK=\u003e\"UPGRADE\"}]"],"cache":{"directories":["$HOME/.composer/cache","$HOME/.npm"]},"before_install":["sudo service redis-server start --bind 127.0.0.1"],"install":["if [ \"$DB\" = 'mysqli' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service mysql stop\n    sudo mv /var/lib/mysql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/mysql /var/lib/mysql\n    sudo service mysql restart\nfi\n","if [ \"$DB\" = 'pgsql' ]; then\n    sudo mkdir /mnt/ramdisk\n    sudo mount -t tmpfs -o size=1024m tmpfs /mnt/ramdisk\n    sudo service postgresql stop\n    sudo mv /var/lib/postgresql /mnt/ramdisk\n    sudo ln -s /mnt/ramdisk/postgresql /var/lib/postgresql\n    sudo service postgresql start 9.6\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n    if [ -n \"$GITHUB_APITOKEN\" ]; then\n        composer config github-oauth.github.com $GITHUB_APITOKEN;\n        echo 'auth.json' \u003e\u003e .git/info/exclude\n    fi\n\n    echo 'extension=\"redis.so\"' \u003e /tmp/redis.ini\n    phpenv config-add /tmp/redis.ini\n\n    # Install composer dependencies.\n    # We need --no-interaction in case we hit API limits for composer. This causes it to fall back to a standard clone.\n    # Typically it should be able to use the Composer cache if any other job has already completed before we started here.\n    travis_retry composer install --prefer-dist --no-interaction;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n    nvm install $NVM_VERSION ;\n    nvm use $NVM_VERSION ;\nfi\n"],"before_script":["phpenv config-rm xdebug.ini","if [ \"$TASK\" = 'PHPUNIT' -o \"$TASK\" = 'UPGRADE' ]; then\n  # Copy generic configuration in place.\n  cp config-dist.php config.php ;\n\n  # Create the moodledata directory.\n  mkdir -p \"$HOME\"/roots/base\n\n  # The database name and password.\n  sed -i \\\n    -e \"s%= 'moodle'%= 'travis_ci_test'%\" \\\n    -e \"s%= 'password'%= ''%\" \\\n    config.php ;\n\n  # The wwwroot and dataroot.\n  sed -i \\\n    -e \"s%http://example.com/moodle%https://localhost%\" \\\n    -e \"s%/home/example/moodledata%/home/travis/roots/base%\" \\\n    config.php ;\n\n  if [ \"$DB\" = 'pgsql' ];\n  then\n    # Postgres-specific setup.\n    sed -i \\\n      -e \"s%= 'username'%= 'postgres'%\" \\\n      config.php ;\n\n    psql -c 'CREATE DATABASE travis_ci_test;' -U postgres;\n  fi\n\n  if [ \"$DB\" = 'mysqli' ];\n  then\n    # MySQL-specific setup.\n    sed -i \\\n      -e \"s%= 'pgsql'%= 'mysqli'%\" \\\n      -e \"s%= 'username'%= 'travis'%\" \\\n      -e \"s%=\u003e 'utf8mb4_unicode_ci'%=\u003e 'utf8mb4_bin'%\" \\\n      config.php;\n\n    mysql -u root -e 'SET GLOBAL innodb_file_format=barracuda;' ;\n    mysql -u root -e 'SET GLOBAL innodb_file_per_table=ON;' ;\n    mysql -u root -e 'SET GLOBAL innodb_large_prefix=ON;' ;\n    mysql -e 'CREATE DATABASE travis_ci_test DEFAULT CHARACTER SET utf8mb4 DEFAULT COLLATE utf8mb4_bin;' ;\n  fi\nfi\n","if [ \"$TASK\" = 'PHPUNIT' ]; then\n  # Create a directory for the phpunit dataroot.\n  mkdir -p \"$HOME\"/roots/phpunit\n\n  # The phpunit dataroot and prefix..\n  sed -i \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_dataroot = '\\/home\\/travis\\/roots\\/phpunit';\" \\\n    -e \"/require_once/i \\\\\\$CFG-\u003ephpunit_prefix = 'p_';\" \\\n    config.php ;\n  # Redis cache store tests\n  sed -i \\\n    -e \"/require_once/i \\\\define('TEST_CACHESTORE_REDIS_TESTSERVERS', '127.0.0.1');\" \\\n    config.php ;\n  # Redis session tests, but not for PHP 7.2 and up. See MDL-60978 for more info.\n  redissession=\"define('TEST_SESSION_REDIS_HOST', '127.0.0.1');\"\n  sed -i \\\n    -e \"/require_once/i \\\\${redissession}\" \\\n    config.php ;\n\n  # Initialise PHPUnit for Moodle.\n  php admin/tool/phpunit/cli/init.php\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  npm install --no-spin;\n  npm install --no-spin -g grunt ;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  # Note - this is deliberately placed in the script section as we\n  # should not add any code until after phpunit has run.\n\n  # The following repositories are required.\n  # The local_ci repository does the actual checking.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci\n\n  # We need the official upstream for comparison\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  git fetch upstream master;\n  export GIT_PREVIOUS_COMMIT=\"`git merge-base FETCH_HEAD $TRAVIS_COMMIT`\";\n  export GIT_COMMIT=\"$TRAVIS_COMMIT\";\n  export UPSTREAM_FETCH_HEAD=`git rev-parse FETCH_HEAD`\n\n  # Variables required by our linter.\n  export gitcmd=`which git`;\n  export gitdir=\"$TRAVIS_BUILD_DIR\";\n  export phpcmd=`which php`;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  # We need the official upstream.\n  git remote add upstream https://github.com/moodle/moodle.git;\n\n  # Checkout 30 STABLE branch (the first version compatible with PHP 7.x)\n  git fetch upstream MOODLE_30_STABLE;\n  git checkout MOODLE_30_STABLE;\n\n  # Perform the upgrade\n  php admin/cli/install_database.php --agree-license --adminpass=Password --adminemail=admin@example.com --fullname=\"Upgrade test\" --shortname=Upgrade;\n\n  # Return to the previous commit\n  git checkout -;\n\n  # Perform the upgrade\n  php admin/cli/upgrade.php --non-interactive --allow-unstable ;\n\n  # The local_ci repository can be used to check upgrade savepoints.\n  git clone https://github.com/moodlehq/moodle-local_ci.git local/ci ;\nfi\n"],"script":["if [ \"$TASK\" = 'PHPUNIT' ]; then\n  vendor/bin/phpunit --fail-on-risky --disallow-test-output --verbose;\nfi\n","if [ \"$TASK\" = 'CITEST' ]; then\n  bash local/ci/php_lint/php_lint.sh;\nfi\n","if [ \"$TASK\" = 'GRUNT' ]; then\n  grunt ;\n  # Add all files to the git index and then run diff --cached to see all changes.\n  # This ensures that we get the status of all files, including new files.\n  # We ignore npm-shrinkwrap.json to make the tasks immune to npm changes.\n  git add . ;\n  git reset -- npm-shrinkwrap.json ;\n  git diff --cached --exit-code ;\nfi\n","if [ \"$TASK\" = 'UPGRADE' ]; then\n  cp local/ci/check_upgrade_savepoints/check_upgrade_savepoints.php ./check_upgrade_savepoints.php\n  result=`php check_upgrade_savepoints.php`;\n  # Check if there are problems\n  count=`echo \"$result\" | grep -P \"ERROR|WARN\" | wc -l` ;\n  if (($count \u003e 0));\n  then\n    echo \"$result\"\n    exit 1 ;\n  fi\nfi"],"jobs":{"fast_finish":true,"include":[{"php":"7.3","env":[{"DB":"mysqli","TASK":"PHPUNIT"}]},{"php":"7.2","env":[{"DB":"none","TASK":"GRUNT","NVM_VERSION":"'lts/carbon'"}]}]},"group":"stable"},"state":"passed","started_at":"2020-04-02T21:43:36Z","finished_at":"2020-04-02T22:16:47Z","duration":5309,"job_ids":[670315001,670315002,670315003,670315004,670315005,670315006,670315007,670315008]}],"commits":[{"id":212162721,"sha":"c93c711ab06fba6d5a20a512da06268c76b83a3a","branch":"MDL-68800-lti-gbs-patch-fixes","tag":null,"message":"MDL-68800 mod_lti: create gbs only for restored activity","committed_at":"2020-05-29T21:46:07Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/34310747f093...c93c711ab06f","pull_request_number":null},{"id":212160213,"sha":"34310747f093162d35f868a2da38cc1f9f491d1a","branch":"MDL-68800-lti-gbs-patch-fixes","tag":null,"message":"MDL-68800 mod_lti: create gbs only for restored activity","committed_at":"2020-05-29T21:19:53Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/48015501804a...34310747f093","pull_request_number":null},{"id":211734853,"sha":"48015501804a88c075ead876c3b2069cf9234ff0","branch":"MDL-68800-lti-gbs-patch-fixes","tag":null,"message":"MDL-68800 mod_lti: fix domain matching launches for 1.3","committed_at":"2020-05-26T20:35:16Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/2e81f2899917...48015501804a","pull_request_number":null},{"id":211728680,"sha":"2e81f2899917a913eea8428cc7a5272ff1288996","branch":"MDL-68800-lti-gbs-patch-fixes","tag":null,"message":"MDL-68800 mod_lti: fix domain matching launches for 1.3","committed_at":"2020-05-26T19:36:14Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/6f85c23d7f78...2e81f2899917","pull_request_number":null},{"id":211693361,"sha":"6f85c23d7f78620843cc274f296066365eae1158","branch":"MDL-68800-lti-gbs-patch-fixes","tag":null,"message":"MDL-68800 mod_lti: apply format fixes per guidelines","committed_at":"2020-05-26T14:49:50Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/commit/6f85c23d7f78","pull_request_number":null},{"id":211675889,"sha":"71965a857221c98264cc7fbe360b9ebb860a5dee","branch":"master","tag":null,"message":"weekly release 3.9dev+","committed_at":"2020-05-22T13:21:37Z","author_name":"Victor Deniz Falcon","author_email":"victor@moodle.com","committer_name":"Victor Deniz Falcon","committer_email":"victor@moodle.com","compare_url":"https://github.com/cengage/moodle/compare/9df4a4de18ac...71965a857221","pull_request_number":null},{"id":208578256,"sha":"779e753fafa950ea7f2f261ea00ccfca3f357f61","branch":"MDL-68328-dlfix","tag":null,"message":"MDL-68328 mod_lti: resourcekey and pwd hidden not removed","committed_at":"2020-05-01T19:03:14Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/f259405d020f...779e753fafa9","pull_request_number":null},{"id":208073454,"sha":"f259405d020f1dd08bc9a8507f6a8db47f4d7faa","branch":"MDL-68328-dlfix","tag":null,"message":"MDL-68328 mod_lti: use hidden form when deeplink options disabled","committed_at":"2020-04-28T14:18:03Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/ef01633abe27...f259405d020f","pull_request_number":null},{"id":207951915,"sha":"ef01633abe277c55b912cc94643857fcddf3d08d","branch":"MDL-68328-dlfix","tag":null,"message":"MDL-68328 mod_lti: use hidden form when deeplink options disabled","committed_at":"2020-04-27T18:07:56Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/cf65c6149b30...ef01633abe27","pull_request_number":null},{"id":207607241,"sha":"b33e8c852423b14b155d529575c7494f6fd639e8","branch":"MDL-65306-resourceid-onecommit","tag":null,"message":"MDL-65306 mod_lti: preserve resourceid restoring older backups","committed_at":"2020-04-24T19:37:55Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@gmail.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/6fa2343f3f68...b33e8c852423","pull_request_number":null},{"id":207606205,"sha":"e09ebf7e9283c4a11280ee952fc910b88eca6964","branch":"master","tag":null,"message":"MDL-65306 mod_lti: upgrade version number","committed_at":"2020-04-24T19:28:04Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/pull/1","pull_request_number":1},{"id":207606192,"sha":"77cfc2b64d910f378dc1ac277717d32505978927","branch":"MDL-65306-resourceid","tag":null,"message":"MDL-65306 mod_lti: upgrade version number","committed_at":"2020-04-24T19:28:04Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/acb1260652c4...77cfc2b64d91","pull_request_number":null},{"id":207595964,"sha":"9df4a4de18ace8fa1e02b93d6f0e572fa20ef1a2","branch":"master","tag":null,"message":"weekly release 3.9dev","committed_at":"2020-04-24T01:41:01Z","author_name":"Jun Pataleta","author_email":"jun@moodle.com","committer_name":"Jun Pataleta","committer_email":"jun@moodle.com","compare_url":"https://github.com/cengage/moodle/compare/df0e58adb140...9df4a4de18ac","pull_request_number":null},{"id":207402491,"sha":"cf65c6149b30df101007fcd208ad280e6412aea4","branch":"MDL-68328-dlfix","tag":null,"message":"MDL-68328 mod_lti: use hidden form when deeplink options disabled","committed_at":"2020-04-23T11:37:30Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/a12d1a19d430...cf65c6149b30","pull_request_number":null},{"id":206943942,"sha":"6fa2343f3f6827db9a424183bd6b6ae8ec3c1977","branch":"MDL-65306-resourceid-onecommit","tag":null,"message":"MDL-65306 mod_lti: preserve resourceid restoring older backups","committed_at":"2020-04-20T13:04:07Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@gmail.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/d97604cb2dce...6fa2343f3f68","pull_request_number":null},{"id":206943799,"sha":"fb23b9add4518154412ec4242acb407ea235aa81","branch":"master","tag":null,"message":"MDL-65306: idnumber restore","committed_at":"2020-04-20T13:02:43Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/pull/1","pull_request_number":1},{"id":206943786,"sha":"acb1260652c43ece7dcbfaa2b2fa0e85ab73bc3f","branch":"MDL-65306-resourceid","tag":null,"message":"MDL-65306: idnumber restore","committed_at":"2020-04-20T13:02:43Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/9099676fe26d...acb1260652c4","pull_request_number":null},{"id":206378454,"sha":"df0e58adb140f90712bcd3229ad936d3b4bc15d9","branch":"master","tag":null,"message":"weekly release 3.9dev","committed_at":"2020-04-08T14:24:37Z","author_name":"Sara Arjona","author_email":"sara@moodle.com","committer_name":"Sara Arjona","committer_email":"sara@moodle.com","compare_url":"https://github.com/cengage/moodle/compare/1d4fdb0d1c60...df0e58adb140","pull_request_number":null},{"id":206378440,"sha":"a12d1a19d430d037fd6bc050140129bb460eb325","branch":"MDL-68328-dlfix","tag":null,"message":"MDL-68328 mod_lti: use hidden form when deeplink options disabled","committed_at":"2020-04-15T22:00:12Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/9a2a9300156a...a12d1a19d430","pull_request_number":null},{"id":206323529,"sha":"9a2a9300156a3ded51c2b03d74dd44e42be4d65b","branch":"MDL-68328-dlfix","tag":null,"message":"MDL-68328 mod_lti: use hidden form when deeplink options disabled","committed_at":"2020-04-15T14:34:22Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/commit/9a2a9300156a","pull_request_number":null},{"id":204807452,"sha":"e5f3547c07800414bc8ae636e0f44fcb79a996fa","branch":"MDL-68328-fixdeeplinking","tag":null,"message":"MDL-68328 mod_lti: fix deeplinking regression","committed_at":"2020-04-03T21:03:10Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/6994da828932...e5f3547c0780","pull_request_number":null},{"id":204805908,"sha":"6994da82893230aef86011e736cbcd3ec30429f8","branch":"MDL-68328-fixdeeplinking","tag":null,"message":"SNL-68328 mod_lti: fix deeplinking regression","committed_at":"2020-04-03T20:47:51Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/8cfc88782134...6994da828932","pull_request_number":null},{"id":204789621,"sha":"8cfc8878213494248535870ec2129ec72f415342","branch":"MDL-68328-fixdeeplinking","tag":null,"message":"SNL-6838 mod_lti: fix deeplinking regression","committed_at":"2020-04-03T18:21:21Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/commit/8cfc88782134","pull_request_number":null},{"id":204660781,"sha":"d97604cb2dcee5d8dee26c7e7ff4b3ec820cbc2e","branch":"MDL-65306-resourceid-onecommit","tag":null,"message":"MDL-65306 mod_lti: preserve resourceid restoring older backups","committed_at":"2020-04-02T21:14:54Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@gmail.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/compare/77d9be43b2fa...d97604cb2dce","pull_request_number":null},{"id":204660660,"sha":"17d00b797138acded5d6933c13987e313833ef59","branch":"master","tag":null,"message":"MDL-65306: idnumber restore","committed_at":"2020-04-02T21:14:27Z","author_name":"Claude Vervoort","author_email":"claude.vervoort@cengage.com","committer_name":"Claude Vervoort","committer_email":"claude.vervoort@cengage.com","compare_url":"https://github.com/cengage/moodle/pull/1","pull_request_number":1}]}